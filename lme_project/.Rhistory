save_model_to_excel(rl.rt.neg.t3, "../lme_results/rl_T3/rl_rt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.mix.t3, "../lme_results/rl_T3/rl_rt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.pos.t3, "../lme_results/rl_T3/rl_rt_pos.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.neg.t3, "../lme_results/rl_T3/rl_opt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.mix.t3, "../lme_results/rl_T3/rl_opt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.pos.t3, "../lme_results/rl_T3/rl_opt_pos.xlsx", include_random = TRUE)
save_model_to_excel(rl.alphaneg.t3, "../lme_results/rl_T3/rl_alpha_pos.xlsx", include_random = FALSE)
save_model_to_excel(rl.alphamix.t3, "../lme_results/rl_T3/rl_alpha_mix.xlsx", include_random = FALSE)
save_model_to_excel(rl.alphapos.t3, "../lme_results/rl_T3/rl_alpha_neg.xlsx", include_random = FALSE)
save_model_to_excel(rl.beta.t3, "../lme_results/rl_T3/rl_beta.xlsx", include_random = FALSE)
save_model_to_excel(ug.rt.t3, "../lme_results/ug_T3/ug_rt.xlsx", include_random = TRUE)
save_model_to_excel(ug.rr.t3, "../lme_results/ug_T3/ug_rr.xlsx", include_random = TRUE)
save_model_to_excel(ug.md.t3, "../lme_results/ug_T3/ug_md.xlsx", include_random = TRUE)
save_model_to_excel(ug.envy.t3, "../lme_results/ug_T3/ug_envy.xlsx", include_random = FALSE)
save_model_to_excel(ug.beta.t3, "../lme_results/ug_T3/ug_beta.xlsx", include_random = FALSE)
save_model_to_excel(ug.f0.t3, "../lme_results/ug_T3/ug_f0.xlsx", include_random = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(car)
library(lme4)
library(lmerTest)
library(Matrix)
library(tidyr)
library(readxl)
library(ggpubr)
library(interactions)
library(performance) #checking model performance
library(margins)
library(tibble) #plot
library(ggplot2) #plot
#rm(list = ls())
# Z-score
normalize = function(x) {
return ((x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE))
}
# Function to recode variables
var_recode = function(data){
data$age_z <- normalize(data$age)
data$edu_z <- normalize(data$edu_level)
data$income_z <- normalize(data$income_order)
data$ses <- data$edu_z + data$income_z
data$poc <- ifelse(data$race == "White", 0, 1) # POC coded as 1
data$poc <- factor(data$poc)
data$female <- ifelse(data$sex == 2, 1, 0)  # Female=1, Male+Other=0
#data$female <- ifelse(data$sex == 2, 1,
#ifelse(data$sex == 3, NA, 0)) # Female coded as 1, Other as NA, Male as 0, row 150
data$female = factor(data$female)
data$group = factor(data$group, levels = c("Healthy", "Depression", "Anhedonia", "Both"))
# mean centering for main effect
data$depression_mc = data$depression - mean(data$depression)
data$anhedonia_mc = data$anhedonia - mean(data$anhedonia)
# raw score
data$pvss_reversed <- -data$pvss_total
data$bdi_total_z <- scale(data$bdi_total)
data$pvss_total_z <- scale(data$pvss_reversed)
return(data)
}
# Function to extract coefficients from a model
extract_coefs <- function(model, model_name) {
coefs <- summary(model)$coefficients
as.data.frame(coefs) %>%
rownames_to_column("term") %>%
filter(term %in% c("depression_mc", "anhedonia_mc", "depression_mc:anhedonia_mc")) %>%
mutate(
conf.low = Estimate - `Std. Error`,
conf.high = Estimate + `Std. Error`,
term_clean = case_when(
term == "depression_mc" ~ "depression",
term == "anhedonia_mc" ~ "anhedonia",
term == "depression_mc:anhedonia_mc" ~ "interaction"
),
model = model_name,
sig_label = case_when(
`Pr(>|t|)` < 0.001 ~ "***",
`Pr(>|t|)` < 0.01  ~ "**",
`Pr(>|t|)` < 0.05  ~ "*",
TRUE ~ ""
)
) %>%
select(model, term_clean, Estimate, `Std. Error`, conf.low, conf.high, sig_label)
}
# save stats results
save_model_to_excel <- function(model, filename, include_random = TRUE) {
library(openxlsx)
# Extract fixed effects
summary_df <- data.frame(
Variable = rownames(summary(model)$coefficients),
summary(model)$coefficients,
row.names = NULL
)
# Start with list containing fixed effects
output_list <- list(Fixed = summary_df)
# Optionally add random effects
if (include_random) {
random_df <- as.data.frame(VarCorr(model))
output_list$Random <- random_df
}
# Save to Excel
write.xlsx(output_list, file = filename, rowNames = FALSE)
}
ug_data = read.csv("../data/LEAP_baseline_ug_n236_analysis.csv")
ug_model= read.csv("../ug_modeling/baseline_fit/UG_fit_FSvarf0_Sep24.csv")
rl_data = read.csv("../data/LEAP_baseline_rl_n220_analysis.csv")
rl_model= read.csv("../rl_modeling/baseline_fit/RL_fit_RW_valence_T1_May25.csv")
demo    = read.csv("../data/LEAP_n236_demographics.csv")
ug_data = var_recode(ug_data)
rl_data = var_recode(rl_data)
rl_data$block_type_recode = factor(rl_data$block_type, levels= c("numberbar_mixed","numberbar_pos","numberbar_neg"),labels=c("Mixed","Positive","Negative"))
print('UG RT')
summary(ug_data$choice_rt)
print('Slot RT')
summary(rl_data$rt)
summary(ug.rt)
model_performance(ug.rt)
summary(ug.rr)
model_performance(ug.rr)
summary(ug.md)
performance(ug.md)
ug.envy <- lm(data = ug_model,
formula = envy ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
# mean centering for main effect
ug_model$depression_mc = ug_model$depression - mean(ug_model$depression)
ug_model$anhedonia_mc = ug_model$anhedonia - mean(ug_model$anhedonia)
ug.envy <- lm(data = ug_model,
formula = envy ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.envy)
confint(ug.envy)
performance(ug.envy)
ug.beta <- lm(data = ug_model,
formula = beta ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.beta)
confint(ug.beta)
performance(ug.beta)
ug.f0 <- lm(data = ug_model,
formula = f0 ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.f0)
confint(ug.f0)
performance(ug.f0)
coef_all <- bind_rows(
extract_coefs(ug.envy, "envy"),
extract_coefs(ug.beta, "beta"),
extract_coefs(ug.f0, "f0")
)
# Factor ordering
coef_all <- coef_all %>%
mutate(
term_clean = factor(term_clean, levels = c("depression", "anhedonia", "interaction")),
model = factor(model, levels = c("envy", "beta", "f0"))
)
# Compute fixed star heights per model
y_star_pos <- coef_all %>%
group_by(model) %>%
summarise(y = max(conf.high) + 0.1)
coef_all <- left_join(coef_all, y_star_pos, by = "model")
# Custom fill colors (Pride flagâ€“inspired)
fill_colors <- c(
"depression" = "#5BCEFA",                   # Light blue
"interaction" = "#B388EB",                  # Soft purple
"anhedonia" = "#F5A9B8"                     # Light pink
)
# Custom facet labels
facet_labels <- c(
envy = "norm aversion",
beta = "inverse temperature",
f0 = "initial norm"
)
# Ensure custom bar order
coef_all <- coef_all %>%
mutate(
term_clean = factor(term_clean, levels = c("depression", "interaction", "anhedonia")),
model = factor(model, levels = c("envy", "beta", "f0"))
)
ggplot(coef_all, aes(x = term_clean, y = Estimate, fill = term_clean)) +
geom_bar(stat = "identity", width = 0.55) +  # skinnier bars, less space
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +
geom_text(aes(y = y, label = sig_label), size = 10, color = "black") +  # bigger stars
facet_wrap(~model, labeller = as_labeller(facet_labels), nrow = 1) +    # force 1 row
labs(x = NULL, y = "coefficient (1-month)", fill = NULL) +
scale_fill_manual(values = fill_colors) +
coord_cartesian(clip = "off") +
theme_minimal(base_size = 18) +  # increase base font size
theme(
panel.grid       = element_blank(),
axis.text.x      = element_blank(),
axis.ticks.x     = element_blank(),
axis.text.y      = element_text(size = 16),
axis.title.y     = element_text(size = 18, margin = margin(r = 10)),
strip.text       = element_text(size = 18, face = "plain"),
legend.position  = "bottom",
legend.direction = "horizontal",
legend.justification = "center",
legend.box       = "horizontal",
legend.text      = element_text(size = 16),
plot.margin      = margin(10, 10, 10, 10),  # tighter margins
strip.placement  = "outside",              # put facet labels outside panels
panel.spacing    = unit(0.8, "lines")      # reduce spacing between panels
)
ggplot(coef_all, aes(x = term_clean, y = Estimate, fill = term_clean)) +
geom_bar(stat = "identity", width = 0.55) +  # skinnier bars, less space
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +
geom_text(aes(y = y, label = sig_label), size = 10, color = "black") +  # bigger stars
facet_wrap(~model, labeller = as_labeller(facet_labels), nrow = 1) +    # force 1 row
labs(x = NULL, y = "coefficient (baseline)", fill = NULL) +
scale_fill_manual(values = fill_colors) +
coord_cartesian(clip = "off") +
theme_minimal(base_size = 18) +  # increase base font size
theme(
panel.grid       = element_blank(),
axis.text.x      = element_blank(),
axis.ticks.x     = element_blank(),
axis.text.y      = element_text(size = 16),
axis.title.y     = element_text(size = 18, margin = margin(r = 10)),
strip.text       = element_text(size = 18, face = "plain"),
legend.position  = "bottom",
legend.direction = "horizontal",
legend.justification = "center",
legend.box       = "horizontal",
legend.text      = element_text(size = 16),
plot.margin      = margin(10, 10, 10, 10),  # tighter margins
strip.placement  = "outside",              # put facet labels outside panels
panel.spacing    = unit(0.8, "lines")      # reduce spacing between panels
)
ggsave(
filename = "./figure/ug_param_effect_T1.jpg",
plot = last_plot(),      # or specify your plot object name if assigned
width = 14,               # adjust as needed
height = 6,              # adjust as needed
dpi = 300,
units = "in"
)
summary(rl.rt.neg)
summary(rl.rt.mix)
summary(rl.rt.pos)
summary(rl.opt.neg)
summary(rl.opt.mix)
summary(rl.opt.pos)
# mean centering for main effect
rl_model$depression_mc = rl_model$depression - mean(rl_model$depression)
rl_model$anhedonia_mc = rl_model$anhedonia - mean(rl_model$anhedonia)
rl.alphapos <- lm(data = rl_model,
formula = alpha_pos ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(rl.alphapos)
confint(rl.alphapos)
performance(rl.alphapos)
rl.alphaneg <- lm(data = rl_model,
formula = alpha_neg ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(rl.alphaneg)
confint(rl.alphaneg)
performance(rl.alphaneg)
rl.beta <- lm(data = rl_model,
formula = beta ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(rl.beta)
confint(rl.beta)
performance(rl.beta)
save_model_to_excel(ug.rt, "../lme_results/ug_T1/ug_rt.xlsx", include_random = TRUE)
save_model_to_excel(ug.rr, "../lme_results/ug_T1/ug_rr.xlsx", include_random = TRUE)
save_model_to_excel(ug.md, "../lme_results/ug_T1/ug_md.xlsx", include_random = TRUE)
save_model_to_excel(ug.envy, "../lme_results/ug_T1/ug_envy.xlsx", include_random = FALSE)
save_model_to_excel(ug.beta, "../lme_results/ug_T1/ug_beta.xlsx", include_random = FALSE)
save_model_to_excel(ug.f0, "../lme_results/ug_T1/ug_f0.xlsx", include_random = FALSE)
save_model_to_excel(rl.rt.neg, "../lme_results/rl_T1/rl_rt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.mix, "../lme_results/rl_T1/rl_rt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.pos, "../lme_results/rl_T1/rl_rt_pos.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.neg, "../lme_results/rl_T1/rl_opt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.mix, "../lme_results/rl_T1/rl_opt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.pos, "../lme_results/rl_T1/rl_opt_pos.xlsx", include_random = TRUE)
save_model_to_excel(rl.alphaneg, "../lme_results/rl_T1/rl_alpha_pos.xlsx", include_random = FALSE)
save_model_to_excel(rl.alphapos, "../lme_results/rl_T1/rl_alpha_neg.xlsx", include_random = FALSE)
save_model_to_excel(rl.beta, "../lme_results/rl_T1/rl_beta.xlsx", include_random = FALSE)
knitr::opts_chunk$set(echo = TRUE)
coef_all <- bind_rows(
extract_coefs(ug.envy.t3, "envy"),
extract_coefs(ug.beta.t3, "beta"),
extract_coefs(ug.f0.t3, "f0")
)
# Factor ordering
coef_all <- coef_all %>%
mutate(
term_clean = factor(term_clean, levels = c("depression", "anhedonia", "interaction")),
model = factor(model, levels = c("envy", "beta", "f0"))
)
# Compute fixed star heights per model
y_star_pos <- coef_all %>%
group_by(model) %>%
summarise(y = max(conf.high) + 0.1)
coef_all <- left_join(coef_all, y_star_pos, by = "model")
# Custom fill colors (Pride flagâ€“inspired)
fill_colors <- c(
"depression" = "#5BCEFA",                   # Light blue
"interaction" = "#B388EB",                  # Soft purple
"anhedonia" = "#F5A9B8"                     # Light pink
)
# Custom facet labels
facet_labels <- c(
envy = "norm aversion",
beta = "inverse temperature",
f0 = "initial norm"
)
# Ensure custom bar order
coef_all <- coef_all %>%
mutate(
term_clean = factor(term_clean, levels = c("depression", "interaction", "anhedonia")),
model = factor(model, levels = c("envy", "beta", "f0"))
)
ggplot(coef_all, aes(x = term_clean, y = Estimate, fill = term_clean)) +
geom_bar(stat = "identity", width = 0.55) +  # skinnier bars, less space
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +
geom_text(aes(y = y, label = sig_label), size = 10, color = "black") +  # bigger stars
facet_wrap(~model, labeller = as_labeller(facet_labels), nrow = 1) +    # force 1 row
labs(x = NULL, y = "coefficient (1-month)", fill = NULL) +
scale_fill_manual(values = fill_colors) +
coord_cartesian(clip = "off") +
theme_minimal(base_size = 18) +  # increase base font size
theme(
panel.grid       = element_blank(),
axis.text.x      = element_blank(),
axis.ticks.x     = element_blank(),
axis.text.y      = element_text(size = 16),
axis.title.y     = element_text(size = 18, margin = margin(r = 10)),
strip.text       = element_text(size = 18, face = "plain"),
legend.position  = "bottom",
legend.direction = "horizontal",
legend.justification = "center",
legend.box       = "horizontal",
legend.text      = element_text(size = 16),
plot.margin      = margin(10, 10, 10, 10),  # tighter margins
strip.placement  = "outside",              # put facet labels outside panels
panel.spacing    = unit(0.8, "lines")      # reduce spacing between panels
)
ggsave(
filename = "./figure/ug_param_effect_T3.jpg",
plot = last_plot(),      # or specify your plot object name if assigned
width = 14,               # adjust as needed
height = 6,              # adjust as needed
dpi = 300,
units = "in"
)
# mean centering for main effect
ug_model_t3$depression_mc = ug_model_t3$depression - mean(ug_model_t3$depression)
ug_model_t3$anhedonia_mc = ug_model_t3$anhedonia - mean(ug_model_t3$anhedonia)
ug.envy.t3 <- lm(data = ug_model_t3,
formula = envy ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.envy.t3)
confint(ug.envy.t3)
performance(ug.envy.t3)
ug.beta.t3 <- lm(data = ug_model_t3,
formula = beta ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.beta.t3)
confint(ug.beta.t3)
performance(ug.beta.t3)
ug.f0.t3 <- lm(data = ug_model_t3,
formula = f0 ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.f0.t3)
confint(ug.f0.t3)
performance(ug.f0.t3)
coef_all <- bind_rows(
extract_coefs(ug.envy.t3, "envy"),
extract_coefs(ug.beta.t3, "beta"),
extract_coefs(ug.f0.t3, "f0")
)
# Factor ordering
coef_all <- coef_all %>%
mutate(
term_clean = factor(term_clean, levels = c("depression", "anhedonia", "interaction")),
model = factor(model, levels = c("envy", "beta", "f0"))
)
# Compute fixed star heights per model
y_star_pos <- coef_all %>%
group_by(model) %>%
summarise(y = max(conf.high) + 0.1)
coef_all <- left_join(coef_all, y_star_pos, by = "model")
# Custom fill colors (Pride flagâ€“inspired)
fill_colors <- c(
"depression" = "#5BCEFA",                   # Light blue
"interaction" = "#B388EB",                  # Soft purple
"anhedonia" = "#F5A9B8"                     # Light pink
)
# Custom facet labels
facet_labels <- c(
envy = "norm aversion",
beta = "inverse temperature",
f0 = "initial norm"
)
# Ensure custom bar order
coef_all <- coef_all %>%
mutate(
term_clean = factor(term_clean, levels = c("depression", "interaction", "anhedonia")),
model = factor(model, levels = c("envy", "beta", "f0"))
)
ggplot(coef_all, aes(x = term_clean, y = Estimate, fill = term_clean)) +
geom_bar(stat = "identity", width = 0.55) +  # skinnier bars, less space
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +
geom_text(aes(y = y, label = sig_label), size = 10, color = "black") +  # bigger stars
facet_wrap(~model, labeller = as_labeller(facet_labels), nrow = 1) +    # force 1 row
labs(x = NULL, y = "coefficient (1-month)", fill = NULL) +
scale_fill_manual(values = fill_colors) +
coord_cartesian(clip = "off") +
theme_minimal(base_size = 18) +  # increase base font size
theme(
panel.grid       = element_blank(),
axis.text.x      = element_blank(),
axis.ticks.x     = element_blank(),
axis.text.y      = element_text(size = 16),
axis.title.y     = element_text(size = 18, margin = margin(r = 10)),
strip.text       = element_text(size = 18, face = "plain"),
legend.position  = "bottom",
legend.direction = "horizontal",
legend.justification = "center",
legend.box       = "horizontal",
legend.text      = element_text(size = 16),
plot.margin      = margin(10, 10, 10, 10),  # tighter margins
strip.placement  = "outside",              # put facet labels outside panels
panel.spacing    = unit(0.8, "lines")      # reduce spacing between panels
)
ggsave(
filename = "./figure/ug_param_effect_T3.jpg",
plot = last_plot(),      # or specify your plot object name if assigned
width = 14,               # adjust as needed
height = 6,              # adjust as needed
dpi = 300,
units = "in"
)
knitr::opts_chunk$set(echo = TRUE)
ug.envy <- lm(data = ug_model,
formula = envy ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.envy)
confint(ug.envy)
performance(ug.envy)
ug_data_t3 = read.csv("../data/LEAP_month1_ug_n129_analysis.csv")
ug_model_t3= read.csv("../ug_modeling/month1_fit/UG_fit_FSvarf0_T3_May25.csv")
rl_data_t3 = read.csv('../data/LEAP_month1_rl_n125_analysis.csv')
rl_model_t3= read.csv("../rl_modeling/month1_fit/RL_fit_RW_context_T3_May25.csv")
ug_data_t3 = var_recode(ug_data_t3)
rl_data_t3 = var_recode(rl_data_t3)
rl_data_t3$block_type_recode = factor(rl_data_t3$block_type, levels= c("numberbar_mixed","numberbar_pos","numberbar_neg"),labels=c("Mixed","Positive","Negative"))
print('UG RT')
summary(ug_data_t3$choice_rt)
print('Slot RT')
summary(rl_data_t3$rt)
# LME per block
rl.neg_df.t3 = subset(rl_data_t3, block_type_recode == 'Negative')
rl.mix_df.t3 = subset(rl_data_t3, block_type_recode == 'Mixed')
rl.pos_df.t3 = subset(rl_data_t3, block_type_recode == 'Positive')
rl.rt.neg.t3 = lmer(data = rl.neg_df.t3,
formula = log_rt ~  depression_mc + anhedonia_mc + optimal
+ depression_mc*anhedonia_mc
+ ladder_us + md_anx_prior_diag + female + age
+ (1 | participant),
control = lmerControl(optCtrl = list(maxfun = 1e6)))
rl.rt.mix.t3 = lmer(data = rl.mix_df.t3,
formula = log_rt ~  depression_mc + anhedonia_mc + optimal
+ depression_mc*anhedonia_mc
+ ladder_us + md_anx_prior_diag + female + age
+ (1 | participant),
control = lmerControl(optCtrl = list(maxfun = 1e6)))
rl.rt.pos.t3 = lmer(data = rl.pos_df.t3,
formula = log_rt ~  depression_mc + anhedonia_mc + optimal
+ depression_mc*anhedonia_mc
+ ladder_us + md_anx_prior_diag + female + age
+ (1 | participant),
control = lmerControl(optCtrl = list(maxfun = 1e6)))
summary(rl.rt.neg.t3)
summary(rl.rt.mix.t3)
summary(rl.rt.pos.t3)
rl.opt.neg.t3 = glmer(data = rl.neg_df.t3,
formula = optimal ~  depression_mc + anhedonia_mc + depression_mc*anhedonia_mc
+ ladder_us + md_anx_prior_diag + female + age_z
+ (1 | participant),
family = binomial(link="logit"),
control = glmerControl(optimizer='bobyqa', optCtrl=list(maxfun=1e7)))
rl.opt.mix.t3 = glmer(data = rl.mix_df.t3,
formula = optimal ~  depression_mc + anhedonia_mc + depression_mc*anhedonia_mc
+ ladder_us + md_anx_prior_diag + female + age_z
+ (1 | participant),
family = binomial(link="logit"),
control = glmerControl(optimizer='bobyqa', optCtrl=list(maxfun=1e7)))
rl.opt.pos.t3 = glmer(data = rl.pos_df.t3,
formula = optimal ~  depression_mc + anhedonia_mc + depression_mc*anhedonia_mc
+ ladder_us + md_anx_prior_diag + female + age_z
+ (1 | participant),
family = binomial(link="logit"),
control = glmerControl(optimizer='bobyqa', optCtrl=list(maxfun=1e7)))
summary(rl.opt.neg.t3)
summary(rl.opt.mix.t3)
summary(rl.opt.pos.t3)
save_model_to_excel(rl.rt.neg.t3, "../lme_results/rl_T3/rl_rt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.mix.t3, "../lme_results/rl_T3/rl_rt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.pos.t3, "../lme_results/rl_T3/rl_rt_pos.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.neg.t3, "../lme_results/rl_T3/rl_opt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.mix.t3, "../lme_results/rl_T3/rl_opt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.pos.t3, "../lme_results/rl_T3/rl_opt_pos.xlsx", include_random = TRUE)
save_model_to_excel(rl.alphaneg.t3, "../lme_results/rl_T3/rl_alpha_pos.xlsx", include_random = FALSE)
save_model_to_excel(rl.alphamix.t3, "../lme_results/rl_T3/rl_alpha_mix.xlsx", include_random = FALSE)
save_model_to_excel(rl.alphapos.t3, "../lme_results/rl_T3/rl_alpha_neg.xlsx", include_random = FALSE)
save_model_to_excel(rl.beta.t3, "../lme_results/rl_T3/rl_beta.xlsx", include_random = FALSE)
# mean centering for main effect
rl_model$depression_mc = rl_model$depression - mean(rl_model$depression)
rl_model$anhedonia_mc = rl_model$anhedonia - mean(rl_model$anhedonia)
rl.alphaneg <- lm(data = rl_model,
formula = alpha_neg ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(rl.alphaneg)
confint(rl.alphaneg)
performance(rl.alphaneg)
save_model_to_excel(rl.rt.neg, "../lme_results/rl_T1/rl_rt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.mix, "../lme_results/rl_T1/rl_rt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.pos, "../lme_results/rl_T1/rl_rt_pos.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.neg, "../lme_results/rl_T1/rl_opt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.mix, "../lme_results/rl_T1/rl_opt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.pos, "../lme_results/rl_T1/rl_opt_pos.xlsx", include_random = TRUE)
save_model_to_excel(rl.alphapos, "../lme_results/rl_T1/rl_alpha_pos.xlsx", include_random = FALSE)
save_model_to_excel(rl.alphaneg, "../lme_results/rl_T1/rl_alpha_neg.xlsx", include_random = FALSE)
save_model_to_excel(rl.beta, "../lme_results/rl_T1/rl_beta.xlsx", include_random = FALSE)
