---
title: "online T3 analysis"
output: pdf_document
date: "2025-04-14"
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r load libraries}
library(dplyr)
library(car)
library(lme4)
library(lmerTest)
library(Matrix)
library(tidyr)
library(readxl)
library(ggpubr)
library(interactions)
library(performance) #checking model performance
library(margins)
library(tibble) #plot
library(ggplot2) #plot

#rm(list = ls())
```
# Functions
```{r functions}
# Z-score
normalize = function(x) {
  return ((x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE))
}

# Function to recode variables
var_recode = function(data){
  data$age_z <- normalize(data$age)
  data$edu_z <- normalize(data$edu_level)
  data$income_z <- normalize(data$income_order)
  data$ses <- data$edu_z + data$income_z
  data$poc <- ifelse(data$race == "White", 0, 1) # POC coded as 1
  data$poc <- factor(data$poc)
  data$female <- ifelse(data$sex == 2, 1, 0)  # Female=1, Male+Other=0
  #data$female <- ifelse(data$sex == 2, 1, 
                      #ifelse(data$sex == 3, NA, 0)) # Female coded as 1, Other as NA, Male as 0, row 150
  data$female = factor(data$female)
  data$group = factor(data$group, levels = c("Healthy", "Depression", "Anhedonia", "Both"))
  
  # mean centering for main effect
  data$depression_mc = data$depression - mean(data$depression)
  data$anhedonia_mc = data$anhedonia - mean(data$anhedonia)
  
  # raw score
  data$pvss_reversed <- -data$pvss_total
  data$bdi_total_z <- scale(data$bdi_total)
  data$pvss_total_z <- scale(data$pvss_reversed) 
  
  return(data)
}

# Function to extract coefficients from a model
extract_coefs <- function(model, model_name) {
  coefs <- summary(model)$coefficients
  as.data.frame(coefs) %>%
    rownames_to_column("term") %>%
    filter(term %in% c("depression_mc", "anhedonia_mc", "depression_mc:anhedonia_mc")) %>%
    mutate(
      conf.low = Estimate - `Std. Error`,
      conf.high = Estimate + `Std. Error`,
      term_clean = case_when(
        term == "depression_mc" ~ "depression",
        term == "anhedonia_mc" ~ "anhedonia",
        term == "depression_mc:anhedonia_mc" ~ "interaction"
      ),
      model = model_name,
      sig_label = case_when(
        `Pr(>|t|)` < 0.001 ~ "***",
        `Pr(>|t|)` < 0.01  ~ "**",
        `Pr(>|t|)` < 0.05  ~ "*",
        TRUE ~ ""
      )
    ) %>%
    select(model, term_clean, Estimate, `Std. Error`, conf.low, conf.high, sig_label)
}

# save stats results 
save_model_to_excel <- function(model, filename, include_random = TRUE) {
  library(openxlsx)
  
  # Extract fixed effects
  summary_df <- data.frame(
    Variable = rownames(summary(model)$coefficients),
    summary(model)$coefficients,
    row.names = NULL
  )
  
  # Start with list containing fixed effects
  output_list <- list(Fixed = summary_df)
  
  # Optionally add random effects
  if (include_random) {
    random_df <- as.data.frame(VarCorr(model))
    output_list$Random <- random_df
  }
  
  # Save to Excel
  write.xlsx(output_list, file = filename, rowNames = FALSE)
}

```
# Data load & recode
```{r Data load}
ug_data_t3 = read.csv("../data/LEAP_month1_ug_n129_analysis.csv")
ug_model_t3= read.csv("../ug_modeling/month1_fit/UG_fit_FSvarf0_T3_May25.csv")

rl_data_t3 = read.csv('../data/LEAP_month1_rl_n125_analysis.csv')
rl_model_t3= read.csv("../rl_modeling/month1_fit/RL_fit_RW_context_T3_May25.csv")
```

```{r Variable recode}
ug_data_t3 = var_recode(ug_data_t3)

rl_data_t3 = var_recode(rl_data_t3)
rl_data_t3$block_type_recode = factor(rl_data_t3$block_type, levels= c("numberbar_mixed","numberbar_pos","numberbar_neg"),labels=c("Mixed","Positive","Negative"))

print('UG RT')
summary(ug_data_t3$choice_rt)

print('Slot RT')
summary(rl_data_t3$rt)
```
# UG model-agnostic regression
```{r UG: RT LMM}
ug.rt.t3 = lmer(data = ug_data_t3, 
            formula = log_rt ~  depression_mc + anhedonia_mc + depression_mc*anhedonia_mc + factor(choice_acc)*offer
            + ladder_us + md_anx_prior_diag + female + age
            + (1 + offer | participant),
            control = lmerControl(optimizer = 'bobyqa', optCtrl = list(maxfun = 1e7)))
```

```{r UG: RT result}
summary(ug.rt.t3)
model_performance(ug.rt.t3)
```

```{r UG: RR LMM}
ug.rr.t3 = glmer(data = ug_data_t3, 
                formula = choice_acc ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc
                + offer + offer*depression_mc*anhedonia_mc
                + ladder_us + md_anx_prior_diag + female + age
                + (1 + offer | participant), # separate assume no correlation between intercept and slope
                family = binomial(link = "logit"), glmerControl(optimizer='bobyqa', optCtrl=list(maxfun=1e6)))
```

```{r UG: RR result}
summary(ug.rr.t3) # no more depxanhxoffer interaction
#model_performance(ug.rr.t3)
```

```{r UG: MR LMM}
ug.md.t3 = lmer(data = ug_data_t3, 
                formula = rating ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc + factor(choice_acc)*offer
                + ladder_us + md_anx_prior_diag + female + age
                + (1 + offer + factor(choice_acc) | participant),
                control = lmerControl(optimizer = "bobyqa", optCtrl = list(method = "L-BFGS-B", maxfun = 1e9)))
```

```{r UG: MR result}
summary(ug.md.t3)
performance(ug.md.t3)
```

# UG model-based analysis
```{r UG: recode}
# mean centering for main effect
ug_model_t3$depression_mc = ug_model_t3$depression - mean(ug_model_t3$depression)
ug_model_t3$anhedonia_mc = ug_model_t3$anhedonia - mean(ug_model_t3$anhedonia)
```

```{r UG: norm aversion}
ug.envy.t3 <- lm(data = ug_model_t3, 
                formula = envy ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.envy.t3)
confint(ug.envy.t3)
performance(ug.envy.t3)
```
```{r UG: inverse temperature}
ug.beta.t3 <- lm(data = ug_model_t3, 
                formula = beta ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.beta.t3)
confint(ug.beta.t3)
performance(ug.beta.t3)
```
```{r UG: initial norm}
ug.f0.t3 <- lm(data = ug_model_t3, 
                formula = f0 ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(ug.f0.t3)
confint(ug.f0.t3)
performance(ug.f0.t3)
```

```{r UG: stats format}
coef_all <- bind_rows(
  extract_coefs(ug.envy.t3, "envy"),
  extract_coefs(ug.beta.t3, "beta"),
  extract_coefs(ug.f0.t3, "f0")
)

# Factor ordering
coef_all <- coef_all %>%
  mutate(
    term_clean = factor(term_clean, levels = c("depression", "anhedonia", "interaction")),
    model = factor(model, levels = c("envy", "beta", "f0"))
  )

# Compute fixed star heights per model
y_star_pos <- coef_all %>%
  group_by(model) %>%
  summarise(y = max(conf.high) + 0.1)

coef_all <- left_join(coef_all, y_star_pos, by = "model")

```

```{r UG: plot setting}
# Custom fill colors (Pride flagâ€“inspired)
fill_colors <- c(
  "depression" = "#5BCEFA",                   # Light blue
  "interaction" = "#B388EB",                  # Soft purple
  "anhedonia" = "#F5A9B8"                     # Light pink
)

# Custom facet labels
facet_labels <- c(
  envy = "norm aversion",
  beta = "inverse temperature",
  f0 = "initial norm"
)

# Ensure custom bar order
coef_all <- coef_all %>%
  mutate(
    term_clean = factor(term_clean, levels = c("depression", "interaction", "anhedonia")),
    model = factor(model, levels = c("envy", "beta", "f0"))
  )

```

```{r UG: model figure 4 g-i}
ggplot(coef_all, aes(x = term_clean, y = Estimate, fill = term_clean)) +
  geom_bar(stat = "identity", width = 0.55) +  # skinnier bars, less space
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +
  geom_text(aes(y = y, label = sig_label), size = 10, color = "black") +  # bigger stars
  facet_wrap(~model, labeller = as_labeller(facet_labels), nrow = 1) +    # force 1 row
  labs(x = NULL, y = "coefficient (1-month)", fill = NULL) +
  scale_fill_manual(values = fill_colors) +
  coord_cartesian(clip = "off") +
  theme_minimal(base_size = 18) +  # increase base font size
  theme(
    panel.grid       = element_blank(),
    axis.text.x      = element_blank(),
    axis.ticks.x     = element_blank(),
    axis.text.y      = element_text(size = 16),
    axis.title.y     = element_text(size = 18, margin = margin(r = 10)),
    strip.text       = element_text(size = 18, face = "plain"),
    legend.position  = "bottom",
    legend.direction = "horizontal",
    legend.justification = "center",
    legend.box       = "horizontal",
    legend.text      = element_text(size = 16),
    plot.margin      = margin(10, 10, 10, 10),  # tighter margins
    strip.placement  = "outside",              # put facet labels outside panels
    panel.spacing    = unit(0.8, "lines")      # reduce spacing between panels
  )
```
```{r UG: figure save}
ggsave(
  filename = "./figure/ug_param_effect_T3.jpg",
  plot = last_plot(),      # or specify your plot object name if assigned
  width = 14,              # adjust as needed
  height = 6,              # adjust as needed
  dpi = 300,
  units = "in"
)

```


# RL model-agnostic regression
```{r RL: by block data}
# LME per block
rl.neg_df.t3 = subset(rl_data_t3, block_type_recode == 'Negative')
rl.mix_df.t3 = subset(rl_data_t3, block_type_recode == 'Mixed')
rl.pos_df.t3 = subset(rl_data_t3, block_type_recode == 'Positive')
```

```{r RL: RT LMM}
rl.rt.neg.t3 = lmer(data = rl.neg_df.t3, 
                formula = log_rt ~  depression_mc + anhedonia_mc + optimal
                + depression_mc*anhedonia_mc
                + ladder_us + md_anx_prior_diag + female + age
                + (1 | participant),
                control = lmerControl(optCtrl = list(maxfun = 1e6)))
rl.rt.mix.t3 = lmer(data = rl.mix_df.t3, 
                formula = log_rt ~  depression_mc + anhedonia_mc + optimal
                + depression_mc*anhedonia_mc
                + ladder_us + md_anx_prior_diag + female + age
                + (1 | participant),
                control = lmerControl(optCtrl = list(maxfun = 1e6)))
rl.rt.pos.t3 = lmer(data = rl.pos_df.t3, 
                formula = log_rt ~  depression_mc + anhedonia_mc + optimal
                + depression_mc*anhedonia_mc
                + ladder_us + md_anx_prior_diag + female + age
                + (1 | participant),
                control = lmerControl(optCtrl = list(maxfun = 1e6)))
```

```{r RL: RT result}
summary(rl.rt.neg.t3)
summary(rl.rt.mix.t3)
summary(rl.rt.pos.t3)
```

```{r RL: OC LMM}
rl.opt.neg.t3 = glmer(data = rl.neg_df.t3, 
                formula = optimal ~  depression_mc + anhedonia_mc + depression_mc*anhedonia_mc
                + ladder_us + md_anx_prior_diag + female + age_z
                + (1 | participant),
                family = binomial(link="logit"),
                control = glmerControl(optimizer='bobyqa', optCtrl=list(maxfun=1e7)))
rl.opt.mix.t3 = glmer(data = rl.mix_df.t3, 
                formula = optimal ~  depression_mc + anhedonia_mc + depression_mc*anhedonia_mc
                + ladder_us + md_anx_prior_diag + female + age_z
                + (1 | participant),
                family = binomial(link="logit"),
                control = glmerControl(optimizer='bobyqa', optCtrl=list(maxfun=1e7)))
rl.opt.pos.t3 = glmer(data = rl.pos_df.t3, 
                formula = optimal ~  depression_mc + anhedonia_mc + depression_mc*anhedonia_mc
                + ladder_us + md_anx_prior_diag + female + age_z
                + (1 | participant),
                family = binomial(link="logit"),
                control = glmerControl(optimizer='bobyqa', optCtrl=list(maxfun=1e7)))
```

```{r RL: OC result}
summary(rl.opt.neg.t3)
summary(rl.opt.mix.t3)
summary(rl.opt.pos.t3)
```

# RL model-based analysis
```{r RL: recode}
# mean centering for main effect
rl_model_t3$depression_mc = rl_model_t3$depression - mean(rl_model_t3$depression)
rl_model_t3$anhedonia_mc = rl_model_t3$anhedonia - mean(rl_model_t3$anhedonia)
```

```{r RL: positive block alpha}
rl.alphapos.t3 <- lm(data = rl_model_t3, 
                formula = alpha_opt ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(rl.alphapos.t3)
confint(rl.alphapos.t3)
performance(rl.alphapos.t3)
```
```{r RL: mix block alpha}
rl.alphamix.t3 <- lm(data = rl_model_t3, 
                formula = alpha_mix ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(rl.alphamix.t3)
confint(rl.alphamix.t3)
performance(rl.alphamix.t3)
```
```{r RL: negative block alpha}
rl.alphaneg.t3 <- lm(data = rl_model_t3, 
                formula = alpha_pes ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(rl.alphaneg.t3)
confint(rl.alphaneg.t3)
performance(rl.alphaneg.t3)
```
```{r RL: inverse temerapture}
rl.beta.t3 <- lm(data = rl_model_t3, 
                formula = beta ~ depression_mc + anhedonia_mc + depression_mc*anhedonia_mc)
summary(rl.beta.t3)
confint(rl.beta.t3)
performance(rl.beta.t3)
```
# Results saving
```{r UG SI}
save_model_to_excel(ug.rt.t3, "../lme_results/ug_T3/ug_rt.xlsx", include_random = TRUE)
save_model_to_excel(ug.rr.t3, "../lme_results/ug_T3/ug_rr.xlsx", include_random = TRUE)
save_model_to_excel(ug.md.t3, "../lme_results/ug_T3/ug_md.xlsx", include_random = TRUE)

save_model_to_excel(ug.envy.t3, "../lme_results/ug_T3/ug_envy.xlsx", include_random = FALSE)
save_model_to_excel(ug.beta.t3, "../lme_results/ug_T3/ug_beta.xlsx", include_random = FALSE)
save_model_to_excel(ug.f0.t3, "../lme_results/ug_T3/ug_f0.xlsx", include_random = FALSE)
```

```{r RL SI}
save_model_to_excel(rl.rt.neg.t3, "../lme_results/rl_T3/rl_rt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.mix.t3, "../lme_results/rl_T3/rl_rt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.rt.pos.t3, "../lme_results/rl_T3/rl_rt_pos.xlsx", include_random = TRUE)

save_model_to_excel(rl.opt.neg.t3, "../lme_results/rl_T3/rl_opt_neg.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.mix.t3, "../lme_results/rl_T3/rl_opt_mix.xlsx", include_random = TRUE)
save_model_to_excel(rl.opt.pos.t3, "../lme_results/rl_T3/rl_opt_pos.xlsx", include_random = TRUE)

save_model_to_excel(rl.alphaneg.t3, "../lme_results/rl_T3/rl_alpha_pos.xlsx", include_random = FALSE)
save_model_to_excel(rl.alphamix.t3, "../lme_results/rl_T3/rl_alpha_mix.xlsx", include_random = FALSE)
save_model_to_excel(rl.alphapos.t3, "../lme_results/rl_T3/rl_alpha_neg.xlsx", include_random = FALSE)
save_model_to_excel(rl.beta.t3, "../lme_results/rl_T3/rl_beta.xlsx", include_random = FALSE)
```
